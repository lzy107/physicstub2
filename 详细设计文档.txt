
# 物理设备模拟器框架详细设计文档

## 1. 系统概述

物理设备模拟器框架是一个用C语言实现的模拟器系统，用于模拟各种物理设备的行为。该框架支持动态加载设备插件、事件监控和动作触发等功能，并包含完整的设备测试系统，可以对模拟设备进行自动化测试。

### 1.1 系统目标

- 提供统一的设备模拟框架
- 支持多种设备类型的模拟
- 实现设备内存和寄存器的模拟
- 提供事件监控和触发机制
- 支持自动化测试
- 提供可扩展的插件系统

### 1.2 主要特性

- 插件系统：支持动态加载设备插件
- 设备管理：统一的设备注册和管理机制
- 地址空间：独立的设备地址空间管理
- 事件监控：支持地址变化监控和触发
- 动作系统：可配置的动作规则和回调机制
- 线程安全：所有操作都是线程安全的
- 测试框架：自动化设备测试系统
- 规则引擎：基于事件的规则触发系统

## 2. 系统架构

### 2.1 整体架构

系统采用模块化设计，主要包括以下核心组件：

```plantuml
@startuml
package "核心框架" {
  [设备管理器] as DeviceManager
  [动作管理器] as ActionManager
  [全局监视器] as GlobalMonitor
  [地址空间] as AddressSpace
  [设备内存] as DeviceMemory
  [设备测试] as DeviceTest
}

package "设备插件" {
  [Flash设备] as FlashDevice
  [FPGA设备] as FPGADevice
  [温度传感器] as TempSensor
}

package "测试系统" {
  [测试规则提供者] as TestRuleProvider
  [设备测试集成] as DeviceTests
}

DeviceManager --> AddressSpace
DeviceManager --> DeviceMemory
ActionManager --> DeviceManager
GlobalMonitor --> ActionManager
GlobalMonitor --> DeviceManager
DeviceTest --> DeviceManager

FlashDevice --> DeviceManager
FPGADevice --> DeviceManager
TempSensor --> DeviceManager

TestRuleProvider --> ActionManager
DeviceTests --> DeviceTest
@enduml
```

### 2.2 核心组件关系

```plantuml
@startuml
class DeviceManager {
  +device_types[]
  +mutex
  +init()
  +destroy()
  +register_type()
  +create_device()
  +destroy_device()
  +get_device()
}

class DeviceType {
  +type_id
  +name
  +ops
  +instances
  +mutex
}

class DeviceInstance {
  +dev_id
  +addr_space
  +private_data
  +next
}

class DeviceOps {
  +init()
  +read()
  +write()
  +reset()
  +destroy()
  +get_mutex()
  +get_rule_manager()
  +configure_memory()
}

class AddressSpace {
  +read()
  +write()
  +read_buffer()
  +write_buffer()
}

class DeviceMemory {
  +regions[]
  +region_count
  +monitor
  +device_type
  +device_id
  +create()
  +destroy()
  +read()
  +write()
  +find_region()
}

class MemoryRegion {
  +base_addr
  +unit_size
  +length
  +data
  +device_type
  +device_id
}

DeviceManager "1" *-- "n" DeviceType
DeviceType "1" *-- "n" DeviceInstance
DeviceType "1" *-- "1" DeviceOps
DeviceInstance "1" *-- "1" AddressSpace
DeviceMemory "1" *-- "n" MemoryRegion
DeviceInstance ..> DeviceMemory
@enduml
```

### 2.3 监控和动作系统

```plantuml
@startuml
class GlobalMonitor {
  +mutex
  +am
  +dm
  +watch_points[]
  +watch_count
  +create()
  +destroy()
  +add_watch()
  +remove_watch()
  +handle_address_change()
  +setup_watch_rule()
}

class WatchPoint {
  +device_type
  +device_id
  +addr
  +last_value
}

class ActionManager {
  +mutex
  +rules[]
  +rule_count
  +create()
  +destroy()
  +load_all_rules()
  +add_rule()
  +remove_rule()
  +execute_rule()
}

class ActionRule {
  +rule_id
  +name
  +trigger
  +targets
  +priority
}

class RuleTrigger {
  +trigger_addr
  +expected_value
  +expected_mask
}

class ActionTarget {
  +type
  +device_type
  +device_id
  +target_addr
  +target_value
  +target_mask
  +callback
  +callback_data
}

class RuleProvider {
  +provider_name
  +get_rules()
  +get_rule_count()
}

GlobalMonitor "1" *-- "n" WatchPoint
GlobalMonitor "1" --> "1" ActionManager
ActionManager "1" *-- "n" ActionRule
ActionRule "1" *-- "1" RuleTrigger
ActionRule "1" *-- "n" ActionTarget
ActionManager ..> RuleProvider
@enduml
```

### 2.4 测试系统

```plantuml
@startuml
class DeviceTest {
  +run_test_case()
  +run_test_suite()
}

class TestCase {
  +name
  +device_type
  +device_id
  +steps[]
  +step_count
  +setup
  +cleanup
}

class TestStep {
  +name
  +reg_addr
  +write_value
  +expect_value
  +is_write
  +format
  +value_scale
}

DeviceTest ..> TestCase
TestCase "1" *-- "n" TestStep
@enduml
```

## 3. 详细设计

### 3.1 设备管理系统

设备管理系统负责管理所有设备类型和设备实例，提供统一的接口进行设备操作。

#### 3.1.1 设备类型管理

```plantuml
@startuml
class DeviceManager {
  +device_types[MAX_DEVICE_TYPES]
  +mutex
  +init()
  +destroy()
  +type_register()
}

class DeviceType {
  +type_id
  +name[32]
  +ops
  +instances
  +mutex
}

enum DeviceTypeId {
  DEVICE_TYPE_FLASH
  DEVICE_TYPE_TEMP_SENSOR
  DEVICE_TYPE_FPGA
  DEVICE_TYPE_I2C_BUS
  DEVICE_TYPE_OPTICAL_MODULE
  MAX_DEVICE_TYPES
}

DeviceManager "1" *-- "n" DeviceType
DeviceType ..> DeviceTypeId
@enduml
```

设备管理器维护一个设备类型数组，每种设备类型都有唯一的ID和名称。设备类型注册时需要提供操作接口，这些接口定义了设备的行为。

#### 3.1.2 设备实例管理

```plantuml
@startuml
class DeviceType {
  +instances
  +mutex
}

class DeviceInstance {
  +dev_id
  +addr_space
  +private_data
  +next
}

class DeviceOps {
  +init()
  +read()
  +write()
  +read_buffer()
  +write_buffer()
  +reset()
  +destroy()
  +get_mutex()
  +get_rule_manager()
  +configure_memory()
}

DeviceType "1" *-- "n" DeviceInstance : 链表
DeviceType "1" *-- "1" DeviceOps
@enduml
```

每个设备类型可以创建多个设备实例，这些实例通过链表连接。设备实例有唯一的ID，并包含私有地址空间和私有数据。

### 3.2 内存管理系统

内存管理系统负责模拟设备的内存和寄存器，提供读写操作接口。

#### 3.2.1 地址空间

```plantuml
@startuml
class AddressSpace {
  +read()
  +write()
  +read_buffer()
  +write_buffer()
}

class DeviceMemory {
  +regions[]
  +region_count
  +monitor
  +device_type
  +device_id
  +create()
  +destroy()
  +read()
  +write()
  +find_region()
}

class MemoryRegion {
  +base_addr
  +unit_size
  +length
  +data
  +device_type
  +device_id
}

class MemoryRegionConfig {
  +base_addr
  +unit_size
  +length
}

DeviceMemory "1" *-- "n" MemoryRegion
DeviceMemory ..> MemoryRegionConfig : 创建
@enduml
```

设备内存由多个内存区域组成，每个区域有基地址、单位大小和长度。内存区域可以通过配置创建，支持不同粒度的读写操作。

### 3.3 监控和动作系统

监控和动作系统负责监控设备状态变化并触发相应的动作。

#### 3.3.1 全局监视器

```plantuml
@startuml
class GlobalMonitor {
  +mutex
  +am
  +dm
  +watch_points[]
  +watch_count
  +create()
  +destroy()
  +add_watch()
  +remove_watch()
  +handle_address_change()
  +setup_watch_rule()
}

class WatchPoint {
  +device_type
  +device_id
  +addr
  +last_value
}

GlobalMonitor "1" *-- "n" WatchPoint
@enduml
```

全局监视器维护一组监视点，每个监视点关联到特定设备的特定地址。当地址值发生变化时，监视器会触发相应的动作。

#### 3.3.2 动作管理器

```plantuml
@startuml
class ActionManager {
  +mutex
  +rules[]
  +rule_count
  +create()
  +destroy()
  +load_all_rules()
  +add_rule()
  +remove_rule()
  +execute_rule()
}

class ActionRule {
  +rule_id
  +name
  +trigger
  +targets
  +priority
}

class RuleTrigger {
  +trigger_addr
  +expected_value
  +expected_mask
}

class ActionTarget {
  +type
  +device_type
  +device_id
  +target_addr
  +target_value
  +target_mask
  +callback
  +callback_data
}

enum ActionType {
  ACTION_TYPE_NONE
  ACTION_TYPE_WRITE
  ACTION_TYPE_SIGNAL
  ACTION_TYPE_CALLBACK
}

ActionManager "1" *-- "n" ActionRule
ActionRule "1" *-- "1" RuleTrigger
ActionRule "1" *-- "n" ActionTarget
ActionTarget ..> ActionType
@enduml
```

动作管理器维护一组规则，每个规则包含触发条件和目标动作。当触发条件满足时，执行相应的目标动作，可以是写入操作、信号或回调函数。

### 3.4 测试系统

测试系统提供自动化测试功能，支持定义测试步骤、测试用例和测试套件。

```plantuml
@startuml
class DeviceTest {
  +run_test_case()
  +run_test_suite()
}

class TestCase {
  +name
  +device_type
  +device_id
  +steps[]
  +step_count
  +setup
  +cleanup
}

class TestStep {
  +name
  +reg_addr
  +write_value
  +expect_value
  +is_write
  +format
  +value_scale
}

DeviceTest ..> TestCase
TestCase "1" *-- "n" TestStep
@enduml
```

测试用例由多个测试步骤组成，每个步骤可以是读操作或写操作，并可以验证读取的值是否符合预期。测试套件可以运行多个测试用例。

### 3.5 设备插件系统

设备插件系统允许添加新的设备类型，每种设备类型需要实现标准的操作接口。

```plantuml
@startuml
interface DeviceOps {
  +init()
  +read()
  +write()
  +reset()
  +destroy()
  +get_mutex()
  +get_rule_manager()
  +configure_memory()
}

class FlashDevice {
  +mutex
  +memory
  +device_rules[]
  +rule_count
}

class FPGADevice {
  +mutex
  +memory
  +device_rules[]
  +rule_count
}

class TempSensor {
  +mutex
  +memory
  +device_rules[]
  +rule_count
}

FlashDevice ..|> DeviceOps
FPGADevice ..|> DeviceOps
TempSensor ..|> DeviceOps
@enduml
```

系统目前实现了三种设备类型：Flash设备、FPGA设备和温度传感器，每种设备都实现了标准的操作接口。

## 4. 设备类型详细设计

### 4.1 Flash设备

Flash设备模拟闪存芯片的行为，支持读写操作和状态管理。

```plantuml
@startuml
class FlashDevice {
  +mutex
  +memory
  +device_rules[]
  +rule_count
  +init()
  +read()
  +write()
  +reset()
  +destroy()
  +erase_callback()
  +read_callback()
  +write_callback()
}

enum FlashRegisters {
  FLASH_REG_STATUS = 0x00
  FLASH_REG_CONTROL = 0x04
  FLASH_REG_CONFIG = 0x08
  FLASH_REG_ADDRESS = 0x0C
  FLASH_REG_DATA = 0x10
  FLASH_REG_SIZE = 0x14
}

enum FlashStatusBits {
  FLASH_STATUS_BUSY = 0x01
  FLASH_STATUS_ERROR = 0x02
  FLASH_STATUS_READY = 0x04
  FLASH_STATUS_SRWD = 0x08
  FLASH_STATUS_WEL = 0x10
}

enum FlashControlCommands {
  FLASH_CTRL_READ = 0x01
  FLASH_CTRL_WRITE = 0x02
  FLASH_CTRL_ERASE = 0x03
}

FlashDevice ..> FlashRegisters
FlashDevice ..> FlashStatusBits
FlashDevice ..> FlashControlCommands
@enduml
```

Flash设备包含多个寄存器，如状态寄存器、控制寄存器、配置寄存器等，并支持读取、写入和擦除操作。

### 4.2 FPGA设备

FPGA设备模拟可编程门阵列的行为，支持配置和控制操作。

```plantuml
@startuml
class FPGADevice {
  +mutex
  +memory
  +device_rules[]
  +rule_count
  +init()
  +read()
  +write()
  +reset()
  +destroy()
  +irq_callback()
}

enum FPGARegisters {
  FPGA_REG_STATUS = 0x00
  FPGA_REG_CONFIG = 0x04
  FPGA_REG_CONTROL = 0x08
  FPGA_REG_IRQ = 0x0C
}

enum FPGAStatusBits {
  FPGA_STATUS_BUSY = 0x01
  FPGA_STATUS_ERROR = 0x02
  FPGA_STATUS_READY = 0x04
  FPGA_STATUS_CONFIGURED = 0x08
}

FPGADevice ..> FPGARegisters
FPGADevice ..> FPGAStatusBits
@enduml
```

FPGA设备包含状态寄存器、配置寄存器、控制寄存器和中断寄存器，支持配置和中断触发功能。

### 4.3 温度传感器

温度传感器模拟温度监测设备的行为，支持温度读取和报警配置。

```plantuml
@startuml
class TempSensor {
  +mutex
  +memory
  +device_rules[]
  +rule_count
  +init()
  +read()
  +write()
  +reset()
  +destroy()
  +alarm_callback()
}

enum TempSensorRegisters {
  TEMP_REG_VALUE = 0x00
  TEMP_REG_CONFIG = 0x04
  TEMP_REG_HIGH_THRESHOLD = 0x08
  TEMP_REG_LOW_THRESHOLD = 0x0C
}

enum TempSensorConfigBits {
  TEMP_CONFIG_ENABLE = 0x01
  TEMP_CONFIG_ALARM_ENABLE = 0x02
  TEMP_CONFIG_HIGH_ALARM = 0x04
  TEMP_CONFIG_LOW_ALARM = 0x08
}

TempSensor ..> TempSensorRegisters
TempSensor ..> TempSensorConfigBits
@enduml
```

温度传感器包含温度值寄存器、配置寄存器、高温阈值寄存器和低温阈值寄存器，支持温度变化触发报警功能。

## 5. 系统交互流程

### 5.1 系统初始化流程

```plantuml
@startuml
participant Main
participant DeviceManager
participant ActionManager
participant GlobalMonitor
participant DeviceType

Main -> DeviceManager: device_manager_init()
activate DeviceManager
DeviceManager --> Main: dm
deactivate DeviceManager

Main -> ActionManager: action_manager_create()
activate ActionManager
ActionManager --> Main: am
deactivate ActionManager

Main -> GlobalMonitor: global_monitor_create(am, dm)
activate GlobalMonitor
GlobalMonitor --> Main: gm
deactivate GlobalMonitor

Main -> DeviceManager: device_type_register(dm, DEVICE_TYPE_FLASH, "FLASH", ops)
activate DeviceManager
DeviceManager -> DeviceType: 初始化设备类型
DeviceManager --> Main: 成功/失败
deactivate DeviceManager

Main -> DeviceManager: device_create(dm, DEVICE_TYPE_FLASH, 0)
activate DeviceManager
DeviceManager -> DeviceType: 创建设备实例
DeviceType -> DeviceInstance: 初始化实例
DeviceInstance --> DeviceType: 实例
DeviceType --> DeviceManager: 实例
DeviceManager --> Main: 设备实例
deactivate DeviceManager

Main -> ActionManager: action_manager_load_all_rules(am)
activate ActionManager
ActionManager -> RuleProvider: 获取规则
RuleProvider --> ActionManager: 规则表
ActionManager --> Main: 成功/失败
deactivate ActionManager
@enduml
```

系统初始化时，首先创建设备管理器、动作管理器和全局监视器，然后注册设备类型，创建设备实例，最后加载所有规则。

### 5.2 设备操作流程

```plantuml
@startuml
participant Client
participant DeviceManager
participant DeviceInstance
participant DeviceMemory
participant GlobalMonitor

Client -> DeviceManager: device_get(dm, DEVICE_TYPE_FLASH, 0)
activate DeviceManager
DeviceManager --> Client: flash_device
deactivate DeviceManager

Client -> DeviceInstance: device_write(flash_device, FLASH_REG_CONTROL, FLASH_CTRL_WRITE)
activate DeviceInstance
DeviceInstance -> DeviceMemory: device_memory_write(memory, addr, value)
activate DeviceMemory
DeviceMemory -> GlobalMonitor: handle_address_change(gm, device_type, device_id, addr, value)
activate GlobalMonitor
GlobalMonitor -> ActionManager: 检查规则触发
GlobalMonitor --> DeviceMemory: 处理完成
deactivate GlobalMonitor
DeviceMemory --> DeviceInstance: 写入成功
deactivate DeviceMemory
DeviceInstance --> Client: 操作结果
deactivate DeviceInstance
@enduml
```

设备操作时，客户端首先获取设备实例，然后调用设备的读写方法。写入操作会触发地址变化处理，可能导致规则触发和动作执行。

### 5.3 测试执行流程

```plantuml
@startuml
participant Client
participant DeviceTest
participant TestCase
participant DeviceManager
participant DeviceInstance

Client -> DeviceTest: run_test_case(dm, test_case)
activate DeviceTest
DeviceTest -> TestCase: 获取测试步骤
activate TestCase
TestCase --> DeviceTest: 测试步骤
deactivate TestCase

DeviceTest -> DeviceManager: device_get(dm, test_case->device_type, test_case->device_id)
activate DeviceManager
DeviceManager --> DeviceTest: 设备实例
deactivate DeviceManager

loop 对每个测试步骤
  alt 写操作
    DeviceTest -> DeviceInstance: device_write(instance, step->reg_addr, step->write_value)
    DeviceInstance --> DeviceTest: 写入结果
  else 读操作
    DeviceTest -> DeviceInstance: device_read(instance, step->reg_addr, &value)
    DeviceInstance --> DeviceTest: 读取值
    DeviceTest -> DeviceTest: 验证值是否符合预期
  end
end

DeviceTest --> Client: 测试结果
deactivate DeviceTest
@enduml
```

测试执行时，测试框架会按照测试用例中定义的步骤，依次执行读写操作并验证结果。

## 6. 扩展指南

### 6.1 添加新设备类型

要添加新的设备类型，需要完成以下步骤：

1. 定义设备类型ID
```c
// 在device_types.h中添加
typedef enum {
    // 现有设备类型
    DEVICE_TYPE_NEW_DEVICE,  // 新设备类型
    MAX_DEVICE_TYPES
} device_type_id_t;
```

2. 创建设备头文件和实现文件
```plantuml
@startuml
class NewDevice {
  +mutex
  +memory
  +device_rules[]
  +rule_count
  +init()
  +read()
  +write()
  +reset()
  +destroy()
}
@enduml
```

3. 实现设备操作接口
```c
// 获取设备操作接口
device_ops_t* get_new_device_ops(void) {
    static device_ops_t ops = {
        .init = new_device_init,
        .read = new_device_read,
        .write = new_device_write,
        .reset = new_device_reset,
        .destroy = new_device_destroy,
        .get_mutex = new_device_get_mutex,
        .get_rule_manager = new_device_get_rule_manager,
        .configure_memory = new_device_configure_memory
    };
    return &ops;
}
```

4. 注册设备类型
```c
// 在main.c中添加
device_type_register(dm, DEVICE_TYPE_NEW_DEVICE, "NEW_DEVICE", get_new_device_ops());
```

5. 创建设备测试用例
```c
// 定义测试步骤
static const test_step_t new_device_test_steps[] = {
    {"步骤1", NEW_DEVICE_REG_CONTROL, 0x01, 0, 1, NULL, 1.0},
    {"步骤2", NEW_DEVICE_REG_STATUS, 0, 0x01, 0, NULL, 1.0}
};

// 定义测试用例
static const test_case_t new_device_test_case = {
    "新设备测试",
    DEVICE_TYPE_NEW_DEVICE,
    0,
    new_device_test_steps,
    sizeof(new_device_test_steps) / sizeof(test_step_t),
    NULL,
    NULL
};
```

### 6.2 添加新规则提供者

要添加新的规则提供者，需要完成以下步骤：

1. 创建规则表
```c
// 定义规则表
static const rule_table_entry_t new_rules[] = {
    {
        "新规则1",
        {NEW_DEVICE_REG_STATUS, 0x01, 0xFF},  // 触发条件
        {
            {
                {ACTION_TYPE_WRITE, DEVICE_TYPE_NEW_DEVICE, 0, NEW_DEVICE_REG_CONTROL, 0x00, 0xFF, NULL, NULL},
                {ACTION_TYPE_NONE}
            },
            1  // 目标数量
        },
        1  // 优先级
    }
};
```

2. 实现规则提供者接口
```c
// 获取规则表
static const rule_table_entry_t* get_new_rules(void) {
    return new_rules;
}

// 获取规则数量
static int get_new_rule_count(void) {
    return sizeof(new_rules) / sizeof(rule_table_entry_t);
}

// 规则提供者
static const rule_provider_t new_rule_provider = {
    "新规则提供者",
    get_new_rules,
    get_new_rule_count
};
```

3. 注册规则提供者
```c
// 注册规则提供者
void register_new_rule_provider(void) {
    action_manager_register_provider(&new_rule_provider);
}
```

## 7. 总结

物理设备模拟器框架提供了一个灵活、可扩展的系统，用于模拟各种物理设备的行为。系统采用模块化设计，包括设备管理、内存管理、监控和动作系统以及测试系统等核心组件。通过插件系统，可以方便地添加新的设备类型和规则提供者。

系统的主要优势包括：

1. 统一的设备管理接口
2. 灵活的内存模型
3. 强大的事件监控和触发机制
4. 完整的自动化测试框架
5. 良好的可扩展性

通过这些特性，系统可以满足各种设备模拟需求，为设备驱动开发和测试提供有力支持。
